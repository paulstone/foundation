
  @import "base";

  // Inspired by https://github.com/twigkit/semantic.gs/blob/master/stylesheets/scss/grid.scss
  $row_width: 1000px;
  $column_gutter: 30px;
  $total_columns: 12;
  $mobile_total_columns: 4;

  // Mixin for Semantic Grid reponsiveness
  @mixin respond-to($media) {
    @if $media == small-screen { @media #{$media-small} { @content; }
    } @else if $media == medium-screen { @media #{$media-medium} { @content; }
    } @else if $media == large-screen { @media #{$media-xlarge} { @content; } }
  }

  // Grid Calculation for Percentages
  @function grid-calc($col_number, $total_columns) {
    @return percentage(($col_number / $total_columns));
  }

  // The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
  @mixin clearfix() { *zoom:1;
    &:before, &:after { content: ""; display: table; }
    &:after { clear: both; }
  }
  @mixin mobile-clearfix() {
    @include respond-to(small-screen) { &:before, &:after { content: ""; display: table; }
      &:after { clear: both; }
      &:last-child { float: none; }
    }
  }

  // Outer row mixin for container rows
  @mixin outer-row() { width: $row_width; max-width: 100%; min-width: $screen-small; margin: 0 auto; @include clearfix(); @include respond-to(small-screen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; } }

  // Inner row mixin for nested rows, must be a child of an outer-row element. $behavior can be 'collapse' to get rid of margins
  @mixin inner-row($behavior: false) {
    @if $behavior == collapse { width: auto; max-width: none; min-width: 0; margin: 0; @include clearfix();
    } @else { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2)); @include clearfix(); }
  }

  // Columns mixin, syntax is ($columns, $behavior). Behavior can be 'centered' which centers things or 'collapse' which collapses the gutters. ex @include row(4,[center | collapse])
  @mixin column($columns:$columns, $behavior: false) {
    @if $behavior == center { float: none; margin: 0 auto; position: relative; min-height: 1px; padding: 0 ($column_gutter/2); width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix();
    } @else if $behavior == collapse { float: left; position: relative; min-height: 1px; padding: 0; width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix();
    } @else { float: left; position: relative; min-height: 1px; padding: 0 ($column_gutter/2); width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix(); }
  }

  // Offset Mixin, include after a column mixin to manipulate its grid offset.
  @mixin offset-by($offset:1) { margin-left: grid-calc($offset, $total_columns); }

  // Push/Pull Mixins, include after a column mixin to manipulate stack ordering.
  @mixin push($push:1) { left: grid-calc($push, $total_columns); }
  @mixin pull($push:1) { right: grid-calc($push, $total_columns); }

  // Mobile Row, synctax is @include mobile-row();
  @mixin mobile-row() { @include respond-to(small-screen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; @include clearfix(); } }

  // Mobile Columns, syntax is @include mobile-column(#);
  @mixin mobile-column($columns:$columns) { @include respond-to(small-screen) { width: grid-calc($columns, $mobile_total_columns); float: left; padding: 0 ($column_gutter/2); } }

  // Mobile Push/Pull Mixin
  @mixin mobile-push($push:1) { @include respond-to(small-screen) { left: grid-calc($push, $mobile_total_columns); } }
  @mixin mobile-pull($push:1) { @include respond-to(small-screen) { right: grid-calc($push, $mobile_total_columns); } }


  /* Enter the Grid */
  /* ------------------------------ */
  .row { width: $row_width; max-width: 100%; min-width: $screen-small; margin: 0 auto;
    .row { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2)); }

    &.collapse {
      .column, .columns { padding: 0; }
    }
    .row { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2));
      &.collapse { margin: 0; }
    }
  }

  .column, .columns { float: left; min-height: 1px; padding: 0 ($column_gutter/2); position: relative;
    &.centered { float: none; margin: 0 auto; }
  }

  [class*="column"] + [class*="column"]:last-child { float: right; }
  [class*="column"] + [class*="column"].end { float: left; }

  // Creating .row-# classes
  @for $i from 1 through $total_columns {
    .row {
      .#{convert-number-to-word($i)} { width: grid-calc($i, $total_columns); }
    }
  }

  // Creating .row.offset-by-# classes
  @for $i from 1 through $total_columns - 2 {
    .row {
      .offset-by-#{convert-number-to-word($i)} { margin-left: grid-calc($i, $total_columns); }
    }
  }

  // Creating .row.push-# classes
  @for $i from 2 through $total_columns - 2 {
    .push-#{convert-number-to-word($i)} { left: grid-calc($i, $total_columns); }
    .pull-#{convert-number-to-word($i)} { right: grid-calc($i, $total_columns); }
  }

  img, object, embed { max-width: 100%; height: auto; }
  img { -ms-interpolation-mode: bicubic; }
  #map_canvas img, .map_canvas img {max-width: none!important;}

  /* Nicolas Gallagher's micro clearfix */
  .row:before, .row:after, .clearfix:before, .clearfix:after { content:""; display:table; }
  .row:after, .clearfix:after { clear: both; }
  .row, .clearfix { zoom: 1; }

  /* Mobile */
  @media #{$media-small} {
    body { -webkit-text-size-adjust: none; -ms-text-size-adjust: none; width: 100%; min-width: 0; margin-left: 0; margin-right: 0; padding-left: 0; padding-right: 0; }

    .row { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
    .column, .columns { width: auto !important; float: none;  }
    .column:last-child, .columns:last-child { float: none; }
    [class*="column"] + [class*="column"]:last-child { float: none; }
    .column:before, .columns:before, .column:after, .columns:after { content:""; display:table; }
    .column:after, .columns:after { clear: both; }

    // Silent Placeholder classes for mobile grid overrides
    %no-left-margin { margin-left: 0 !important; }
    %left-auto { left: auto; }
    %right-auto { right: auto; }

    @for $i from 1 through $total_columns - 2 {
      .offset-by-#{convert-number-to-word($i)} { @extend %no-left-margin; }
    }
    @for $i from 2 through $total_columns - 2 {
      .push-#{convert-number-to-word($i)} { @extend %left-auto; }
      .pull-#{convert-number-to-word($i)} { @extend %right-auto; }
    }

    /* Mobile 4-column Grid */
    @for $i from 1 through $mobile_total_columns {
      .row {
        .mobile-#{convert-number-to-word($i)} { width: grid-calc($i, $mobile_total_columns); float: left; padding: 0 ($column_gutter/2);
          &:last-child { float: right; }
        }
      }
    }
    @for $i from 1 through $mobile_total_columns - 1 {
      .push-#{convert-number-to-word($i)}-mobile { left: grid-calc($i, $mobile_total_columns); }
      .pull-#{convert-number-to-word($i)}-mobile { right: grid-calc($i, $mobile_total_columns); }
    }
  }

/*  --------------------------------------------------
:: Block grids

These are 2-up, 3-up, 4-up and 5-up ULs, suited
for repeating blocks of content. Add 'mobile' to
them to switch them just like the layout grid
(one item per line) on phones

For IE7/8 compatibility block-grid items need to be
the same height. You can optionally uncomment the
lines below to support arbitrary height, but know
that IE7/8 do not support :nth-child.
-------------------------------------------------- */

  .block-grid { display: block; overflow: hidden; padding: 0;

    &>li { display: block; height: auto; float: left; }
  }

  .block-grid.two-up { margin: 0 -15px; }
  .block-grid.two-up>li { width: 50%; padding: 0 15px 15px; }
  /*  .block-grid.two-up>li:nth-child(2n+1) {clear: left;} */

  .block-grid.three-up { margin: 0 -12px; }
  .block-grid.three-up>li { width: 33.33%; padding: 0 12px 12px; }
  /*  .block-grid.three-up>li:nth-child(3n+1) {clear: left;} */

  .block-grid.four-up { margin: 0 -10px; }
  .block-grid.four-up>li { width: 25%; padding: 0 10px 10px; }
  /*  .block-grid.four-up>li:nth-child(4n+1) {clear: left;} */

  .block-grid.five-up { margin: 0 -8px; }
  .block-grid.five-up>li { width: 20%; padding: 0 8px 8px; }
  /*  .block-grid.five-up>li:nth-child(5n+1) {clear: left;} */

  /* Mobile */

  @media #{$media-small} {
    .block-grid.mobile { margin-left: 0; }
    .block-grid.mobile > li { float: none; width: 100%; margin-left: 0; }
  }
