// Inspired by https://github.com/twigkit/semantic.gs/blob/master/stylesheets/scss/grid.scss

// Mixin for Semantic Grid reponsiveness

  @mixin respond-to($media) {
    @if $media == small-screen { @media #{$media-small} { @content; }
    } @else if $media == medium-screen { @media #{$media-medium} { @content; }
    } @else if $media == large-screen { @media #{$media-xlarge} { @content; } }
  }

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/

  @mixin clearfix() { *zoom:1;
    &:before, &:after { content: ""; display: table; }
    &:after { clear: both; }
  }
  @mixin mobile-clearfix() {
    @include respond-to(small-screen) { &:before, &:after { content: ""; display: table; }
      &:after { clear: both; }
      &:last-child { float: none; }
    }
  }

  // Outer row mixin for container rows

  @mixin outer-row() { width: $row_width; max-width: 100%; min-width: $screen-small; margin: 0 auto; @include clearfix(); @include respond-to(small-screen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; } }

  // Inner row mixin for nested rows, must be a child of an outer-row element. $behavior can be 'collapse' to get rid of margins

  @mixin inner-row($behavior: false) {
    @if $behavior == collapse { width: auto; max-width: none; min-width: 0; margin: 0; @include clearfix();
    } @else { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2)); @include clearfix(); }
  }

  // Columns mixin, syntax is ($columns, $behavior). Behavior can be 'centered' which centers things or 'collapse' which collapses the gutters. ex @include row(4,[center | collapse])

  @mixin column($columns:$columns, $behavior: false) {
    @if $behavior == center { float: none; margin: 0 auto; position: relative; min-height: 1px; padding: 0 ($column_gutter/2); width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix();
    } @else if $behavior == collapse { float: left; position: relative; min-height: 1px; padding: 0; width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix();
    } @else { float: left; position: relative; min-height: 1px; padding: 0 ($column_gutter/2); width: grid-calc($columns, $total_columns); @include respond-to(small-screen) { width: auto !important; float: none; } @include mobile-clearfix(); }
  }

  // Offset Mixin, include after a column mixin to manipulate its grid offset.

  @mixin offset-by($offset:1) { margin-left: grid-calc($offset, $total_columns); }

  // Push/Pull Mixins, include after a column mixin to manipulate stack ordering.

  @mixin push($push:1) { left: grid-calc($push, $total_columns); }
  @mixin pull($push:1) { right: grid-calc($push, $total_columns); }

  // Mobile Row, synctax is @include mobile-row();

  @mixin mobile-row() { @include respond-to(small-screen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; @include clearfix(); } }

  // Mobile Columns, syntax is @include mobile-column(#);

  @mixin mobile-column($columns:$columns) { @include respond-to(small-screen) { width: grid-calc($columns, $mobile_total_columns); float: left; padding: 0 ($column_gutter/2); } }

  // Mobile Push/Pull Mixin

  @mixin mobile-push($push:1) { @include respond-to(small-screen) { left: grid-calc($push, $mobile_total_columns); } }
  @mixin mobile-pull($push:1) { @include respond-to(small-screen) { right: grid-calc($push, $mobile_total_columns); } }
